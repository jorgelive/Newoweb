security:

    role_hierarchy:

        ROLE_USER:                    [PUBLIC_ACCESS]
        ROLE_ADMIN:                   [ROLE_USER]
        ROLE_FIT_EDITOR:              [ROLE_ADMIN]
        ROLE_TRANSPORTES_EDITOR:      [ROLE_ADMIN]
        ROLE_ADMINISTRACION_EDITOR:   [ROLE_ADMIN]
        ROLE_RESERVAS_EDITOR:         [ROLE_ADMIN]
        ROLE_COTIZACIONES_EDITOR:     [ROLE_ADMIN]
        ROLE_OPERACIONES_EDITOR:      [ROLE_ADMIN]
        ROLE_SUPER_ADMIN:             [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_FIT_EDITOR, ROLE_TRANSPORTES_EDITOR, ROLE_CARGA, ROLE_ADMINISTRACION_EDITOR, ROLE_RESERVAS_EDITOR, ROLE_COTIZACIONES_EDITOR, ROLE_OPERACIONES_EDITOR]

    password_hashers:
        Sonata\UserBundle\Model\UserInterface: auto

    providers:
        users_in_memory: { memory: null }
        sonata_user_bundle:
            id: sonata.user.security.user_provider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: sonata_user_bundle
            context: user
            form_login:
                login_path: sonata_user_admin_security_login
                check_path: sonata_user_admin_security_check
                default_target_path: sonata_admin_dashboard
            logout:
                path: sonata_user_admin_security_logout
                target: sonata_user_admin_security_login
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 2629746
                path: /admin

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    access_control:
        - { path: ^/app/cotizacioncotservicio/ical$, role: PUBLIC_ACCESS }

        - { path: ^/app/reservareserva/ical$, role: PUBLIC_ACCESS }
        - { path: ^/app/reservareserva/\d*/resumen/\d*$, role: PUBLIC_ACCESS }

        - { path: ^/app/reservaunit/\d*/ical$, role: PUBLIC_ACCESS }
        - { path: ^/app/reservaunit/\d*/detalle$, role: PUBLIC_ACCESS }
        - { path: ^/app/reservaunit/\d*/resumen$, role: PUBLIC_ACCESS }

        - { path: ^/app/cotizacioncotizacion/\d*/resumen/\d*$, role: PUBLIC_ACCESS }

        - { path: ^/app/cotizacionfile/\d*/resumen/\d*$, role: PUBLIC_ACCESS }

        - { path: ^/app/fitdieta/\d*/resumen/\d*$, role: PUBLIC_ACCESS }

        # Admin login page needs to be accessed without credential
        - { path: ^/admin/login$, role: PUBLIC_ACCESS }
        - { path: ^/admin/logout$, role: PUBLIC_ACCESS }
        - { path: ^/admin/login_check$, role: PUBLIC_ACCESS }
        - { path: ^/admin/request$, role: PUBLIC_ACCESS }
        - { path: ^/admin/check-email$, role: PUBLIC_ACCESS }
        - { path: ^/admin/reset/.*$, role: PUBLIC_ACCESS }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/dashboard$, role: ROLE_USER }
        - { path: ^/app/, role: ROLE_USER }
        - { path: ^/.*, role: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon